/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Cam } from "./globals/@noctua.form";
export { Cam } from "./globals/@noctua.form";
export namespace Components {
    interface GoLoadingSpinner {
        "message": string;
    }
    interface WcGenesPanel {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam": Cam;
        "highlightActivity": (nodeId: any) => Promise<void>;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy": any;
    }
    interface WcGocamLegend {
    }
    interface WcGocamSelector {
    }
    interface WcGocamViz {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
         */
        "apiUrl": string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId": string;
        /**
          * Center the cytoscape graph to fit the whole graph
         */
        "resetView": () => Promise<void>;
        /**
          * Define if the GO-CAM viz should capture the mouse scroll
          * @param shouldAF set to true if you want a mouse scroll to be captured by the component
         */
        "setAutoFocus": (shouldAF: any) => Promise<void>;
        /**
          * Manually supply GO-CAM data to be rendered. This will overwrite any data previously fetched using the gocamId and apiUrl props, if they were provided.
          * @param model GO-CAM object
         */
        "setModelData": (model: any) => Promise<void>;
        /**
          * Show/hide default legend
         */
        "showLegend": boolean;
        "toggleComplex": () => Promise<void>;
    }
}
export interface WcGenesPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcGenesPanelElement;
}
export interface WcGocamSelectorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcGocamSelectorElement;
}
export interface WcGocamVizCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWcGocamVizElement;
}
declare global {
    interface HTMLGoLoadingSpinnerElement extends Components.GoLoadingSpinner, HTMLStencilElement {
    }
    var HTMLGoLoadingSpinnerElement: {
        prototype: HTMLGoLoadingSpinnerElement;
        new (): HTMLGoLoadingSpinnerElement;
    };
    interface HTMLWcGenesPanelElement extends Components.WcGenesPanel, HTMLStencilElement {
    }
    var HTMLWcGenesPanelElement: {
        prototype: HTMLWcGenesPanelElement;
        new (): HTMLWcGenesPanelElement;
    };
    interface HTMLWcGocamLegendElement extends Components.WcGocamLegend, HTMLStencilElement {
    }
    var HTMLWcGocamLegendElement: {
        prototype: HTMLWcGocamLegendElement;
        new (): HTMLWcGocamLegendElement;
    };
    interface HTMLWcGocamSelectorElement extends Components.WcGocamSelector, HTMLStencilElement {
    }
    var HTMLWcGocamSelectorElement: {
        prototype: HTMLWcGocamSelectorElement;
        new (): HTMLWcGocamSelectorElement;
    };
    interface HTMLWcGocamVizElement extends Components.WcGocamViz, HTMLStencilElement {
    }
    var HTMLWcGocamVizElement: {
        prototype: HTMLWcGocamVizElement;
        new (): HTMLWcGocamVizElement;
    };
    interface HTMLElementTagNameMap {
        "go-loading-spinner": HTMLGoLoadingSpinnerElement;
        "wc-genes-panel": HTMLWcGenesPanelElement;
        "wc-gocam-legend": HTMLWcGocamLegendElement;
        "wc-gocam-selector": HTMLWcGocamSelectorElement;
        "wc-gocam-viz": HTMLWcGocamVizElement;
    }
}
declare namespace LocalJSX {
    interface GoLoadingSpinner {
        "message"?: string;
    }
    interface WcGenesPanel {
        /**
          * BBOP Graph Handler -> GO-CAM Must be provided to build the side panel
         */
        "cam"?: Cam;
        "onSelectChanged"?: (event: WcGenesPanelCustomEvent<any>) => void;
        /**
          * Passed by the parent to highlight & clear highlight nodes
         */
        "parentCy"?: any;
    }
    interface WcGocamLegend {
    }
    interface WcGocamSelector {
        "onSelectGOCAM"?: (event: WcGocamSelectorCustomEvent<any>) => void;
    }
    interface WcGocamViz {
        /**
          * The url used to fetch GO-CAM graphs. Any occurrence of %ID in the string will be replaced by the GO-CAM ID.
         */
        "apiUrl"?: string;
        /**
          * ID of the GO-CAM to be shown in this widget. If provided, the GO-CAM will automatically be fetched using this ID and the value of the `api-url` prop. If omitted, data will not automatically be fetched, but can be provided via the `setModelData` method. This may be useful if the host page already has the GO-CAM data.
         */
        "gocamId"?: string;
        "onLayoutChange"?: (event: WcGocamVizCustomEvent<any>) => void;
        "onNodeClick"?: (event: WcGocamVizCustomEvent<any>) => void;
        "onNodeOut"?: (event: WcGocamVizCustomEvent<any>) => void;
        "onNodeOver"?: (event: WcGocamVizCustomEvent<any>) => void;
        /**
          * Show/hide default legend
         */
        "showLegend"?: boolean;
    }
    interface IntrinsicElements {
        "go-loading-spinner": GoLoadingSpinner;
        "wc-genes-panel": WcGenesPanel;
        "wc-gocam-legend": WcGocamLegend;
        "wc-gocam-selector": WcGocamSelector;
        "wc-gocam-viz": WcGocamViz;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "go-loading-spinner": LocalJSX.GoLoadingSpinner & JSXBase.HTMLAttributes<HTMLGoLoadingSpinnerElement>;
            "wc-genes-panel": LocalJSX.WcGenesPanel & JSXBase.HTMLAttributes<HTMLWcGenesPanelElement>;
            "wc-gocam-legend": LocalJSX.WcGocamLegend & JSXBase.HTMLAttributes<HTMLWcGocamLegendElement>;
            "wc-gocam-selector": LocalJSX.WcGocamSelector & JSXBase.HTMLAttributes<HTMLWcGocamSelectorElement>;
            "wc-gocam-viz": LocalJSX.WcGocamViz & JSXBase.HTMLAttributes<HTMLWcGocamVizElement>;
        }
    }
}
